"""
Django settings for Ecommerce project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# AUTH_USER_MODEL = 'product_management.CustomUser'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-u_yt4x1mk5i^w(6g2a!9te5wjvit60*u40@1xmp)3_p%d_fc28'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.postgres",
    "product_management",
    "customer",
    "rest_framework",
    # "Learning_ORM_queries",
    "Learning_ORM_queries.apps.LearningOrmQueriesConfig" 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Ecommerce.urls'



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Ecommerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

print("--------bae dir-------",BASE_DIR)

DATABASES = {
    'sql_lite_db': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    'postgresql_db': {
    # 'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'django_learning',
        'USER': 'gopi',
        'PASSWORD': 'msi@root',
        'HOST': '127.0.0.1',
        'PORT': '5432',

        # 'AUTOCOMMIT': False, #the admin records also not be saved or deleted because of suto commit false
    },
    # we don't need to specify the default database config but atleast we have specify empty dictionary like below
    "default":{} #if we don't want to make any database default this will be useful
}   

# settings.py

# we can define multiple path classes to achive our requirements

# here is the first list class is having priority which means the first path is working

# if first path return none means it will go to send path

# Django also provides an API that allows you to maintain complete control over database usage in your code. A manually(using while query) specified database allocation will take priority over a database allocated by a router.

# DATABASE_ROUTERS = ['Learning_ORM_queries.db_routers.routers.MyRouter','Learning_ORM_queries.db_routers.routers.MyRouterCopy']

DATABASE_ROUTERS = ['Learning_ORM_queries.db_routers.routers.MyRouter_3']








# /var/lib/postgresql/16/main


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# STATIC_URL = 'statics/'

STATIC_URL = 'statics/'

STATIC_ROOT = os.path.join(BASE_DIR,'assets')

STATICFILES_DIRS = [BASE_DIR]

MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR,'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#   1 -----------learn atomic requests

# ATOMIC_REQUESTS = True

# When you set ATOMIC_REQUESTS = True in your Django project's settings.py file, 
# it enables atomic requests for the entire project. This means that each request is wrapped in a database 
# transaction, and if any database error occurs during the request, the entire transaction is rolled back.